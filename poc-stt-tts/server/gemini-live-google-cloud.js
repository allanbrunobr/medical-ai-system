/**
 * Servidor Gemini Live com Google Cloud Speech-to-Text e Text-to-Speech
 */

import { WebSocketServer } from 'ws';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { SpeechClient } from '@google-cloud/speech';
import { TextToSpeechClient } from '@google-cloud/text-to-speech';
import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { createServer } from 'http';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// Carrega vari√°veis de ambiente
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
dotenv.config({ path: join(__dirname, '.env') });

const app = express();
app.use(cors());
app.use(express.json());

// Add Elasticsearch proxy
import elasticsearchProxy from './elasticsearch-proxy.js';
app.use('/api/elasticsearch', elasticsearchProxy);

const server = createServer(app);
const wss = new WebSocketServer({ server });

// Configura√ß√£o APIs - Tenta m√∫ltiplas fontes
const apiKey = process.env.GOOGLE_GENERATIVE_AI_API_KEY || 
               process.env.GOOGLE_AI_KEY || 
               'AIzaSyBwnoEr6oNq7yjgvR97ZcqRuvYoC0uW8A4'; // Fallback

console.log('üîç Verificando API Key:', apiKey ? 'Configurada' : 'N√£o configurada');
console.log('üîç Vari√°veis de ambiente dispon√≠veis:', Object.keys(process.env).filter(key => key.includes('GOOGLE')));

if (!apiKey || apiKey === 'undefined') {
  console.error('‚ùå ERRO: GOOGLE_GENERATIVE_AI_API_KEY n√£o configurada!');
  console.error('üìÅ Diret√≥rio atual:', __dirname);
  console.error('üìÑ Arquivo .env esperado:', join(__dirname, '.env'));
  console.error('üîç Tentando usar fallback...');
}

const genAI = new GoogleGenerativeAI(apiKey);

// Clientes Google Cloud
const speechClient = new SpeechClient();
const ttsClient = new TextToSpeechClient();

// Sess√µes ativas
const activeSessions = new Map();

class GeminiLiveGoogleCloudSession {
  constructor(websocket, sessionId) {
    this.ws = websocket;
    this.sessionId = sessionId;
    this.geminiModel = null;
    this.isConnected = false;
    this.audioBuffer = [];
    this.isProcessing = false;
    this.conversationHistory = [];
    this.sampleRate = 48000; // Padr√£o para WEBM OPUS
  }

  async initialize(config = {}) {
    try {
      console.log(`[${this.sessionId}] Iniciando sess√£o Google Cloud...`);
      
      // Configura modelo Gemini
      this.geminiModel = genAI.getGenerativeModel({
        model: config.model || 'gemini-2.5-flash',
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 1024,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_ONLY_HIGH",
          },
        ],
      });
      
      this.isConnected = true;
      
      // Envia confirma√ß√£o
      this.sendMessage({
        type: 'connection',
        status: 'connected',
        sessionId: this.sessionId,
        message: 'Assistente m√©dico com Google Cloud Speech pronto'
      });

    } catch (error) {
      console.error(`[${this.sessionId}] Erro ao inicializar:`, error);
      this.sendMessage({
        type: 'error',
        message: 'Erro ao conectar assistente m√©dico',
        error: error.message
      });
    }
  }

  // Processa √°udio recebido usando Google Cloud Speech-to-Text
  async processAudio(audioData) {
    if (!this.isConnected || this.isProcessing) return;
    
    try {
      this.isProcessing = true;
      
      // Converte base64 para buffer
      const audioBuffer = Buffer.from(audioData, 'base64');
      
      console.log(`[${this.sessionId}] Processando √°udio: ${audioBuffer.length} bytes`);
      
      // Configura requisi√ß√£o para Google Cloud Speech
      const request = {
        audio: {
          content: audioBuffer,
        },
        config: {
          encoding: 'WEBM_OPUS', // Formato que o cliente est√° enviando
          sampleRateHertz: 48000, // Sample rate do WEBM OPUS
          languageCode: 'pt-BR',
          enableAutomaticPunctuation: true,
          enableWordTimeOffsets: false,
          model: 'latest_long', // Modelo gen√©rico mais preciso
          // Configura√ß√µes adicionais para melhor detec√ß√£o
          useEnhanced: true,
          enableSpeakerDiarization: false,
          alternativeLanguageCodes: ['en-US'], // Fallback
        },
      };
      
      // Transcreve √°udio
      const [response] = await speechClient.recognize(request);
      const transcription = response.results
        .map(result => result.alternatives[0].transcript)
        .join(' ');
      
      if (transcription && transcription.trim()) {
        console.log(`[${this.sessionId}] ‚úÖ Transcri√ß√£o: ${transcription}`);
        
        // Envia transcri√ß√£o
        this.sendMessage({
          type: 'transcript',
          text: transcription,
          timestamp: new Date()
        });
        
        // Processa a pergunta m√©dica
        await this.processMedicalQuery(transcription);
      } else {
        console.log(`[${this.sessionId}] ‚ùå Nenhuma transcri√ß√£o detectada`);
        
        // Debug: mostra se h√° resultados mas sem confian√ßa
        if (response.results && response.results.length > 0) {
          console.log(`[${this.sessionId}] Resultados encontrados:`, response.results.length);
          response.results.forEach((result, i) => {
            if (result.alternatives && result.alternatives[0]) {
              console.log(`[${this.sessionId}] Alt ${i}: "${result.alternatives[0].transcript}" (conf: ${result.alternatives[0].confidence})`);
            }
          });
        } else {
          console.log(`[${this.sessionId}] Nenhum resultado retornado pela API`);
        }
      }
      
    } catch (error) {
      console.error(`[${this.sessionId}] Erro ao processar √°udio:`, error);
      
      this.sendMessage({
        type: 'error',
        message: 'Erro ao processar √°udio. Tente falar mais alto e claro.'
      });
    } finally {
      this.isProcessing = false;
    }
  }

  // Tenta processar √°udio com formato alternativo
  async processAudioWithFallback(audioData) {
    const audioBuffer = Buffer.from(audioData, 'base64');
    
    const request = {
      audio: {
        content: audioBuffer,
      },
      config: {
        encoding: 'WEBM_OPUS', // Formato alternativo
        sampleRateHertz: 48000,
        languageCode: 'pt-BR',
        enableAutomaticPunctuation: true,
      },
    };
    
    const [response] = await speechClient.recognize(request);
    const transcription = response.results
      .map(result => result.alternatives[0].transcript)
      .join(' ');
    
    if (transcription && transcription.trim()) {
      this.sendMessage({
        type: 'transcript',
        text: transcription,
        timestamp: new Date()
      });
      
      await this.processMedicalQuery(transcription);
    }
  }

  // Processa texto direto
  async processText(text) {
    if (!this.isConnected) return;
    
    try {
      console.log(`[${this.sessionId}] Processando texto:`, text);
      
      this.sendMessage({
        type: 'transcript',
        text: text,
        timestamp: new Date()
      });
      
      await this.processMedicalQuery(text);
      
    } catch (error) {
      console.error(`[${this.sessionId}] Erro ao processar texto:`, error);
      this.sendMessage({
        type: 'error',
        message: 'Erro ao processar pergunta'
      });
    }
  }

  // Processa consulta m√©dica com Elasticsearch RAG
  async processMedicalQuery(text) {
    try {
      // Adiciona √† hist√≥ria
      this.conversationHistory.push({
        role: 'user',
        content: text
      });
      
      console.log(`[${this.sessionId}] üîç Analisando contexto da conversa...`);
      
      // 1. Extrai sintomas acumulados da conversa
      const accumulatedSymptoms = this.extractSymptomsFromConversation();
      const searchQuery = accumulatedSymptoms.length > 0 ? accumulatedSymptoms.join(' ') : text;
      
      console.log(`[${this.sessionId}] üîç Sintomas identificados: ${accumulatedSymptoms.join(', ') || 'nenhum espec√≠fico'}`);
      console.log(`[${this.sessionId}] üîç Buscando no Elasticsearch: "${searchQuery}"`);
      
      // 2. Busca no Elasticsearch com sintomas acumulados
      const elasticsearchResults = await this.searchElasticsearch(searchQuery);
      
      // 3. Analisa se precisa de mais informa√ß√µes (considerando contexto)
      const needsMoreInfo = this.analyzeIfNeedsMoreInfo(text, elasticsearchResults, accumulatedSymptoms);
      
      let response;
      
      if (needsMoreInfo.needs && this.conversationHistory.length < 6) {
        // Faz pergunta de follow-up
        response = await this.generateFollowUpQuestion(text, elasticsearchResults, needsMoreInfo);
      } else {
        // Gera resposta final com base nos dados coletados
        response = await this.generateFinalMedicalResponse(text, elasticsearchResults);
      }
      
      console.log(`[${this.sessionId}] üí¨ Resposta gerada: ${response.substring(0, 100)}...`);
      
      // Adiciona resposta √† hist√≥ria
      this.conversationHistory.push({
        role: 'assistant',
        content: response
      });
      
      // Detecta emerg√™ncias
      const hasEmergency = this.detectEmergency(text);
      
      // Envia resposta em texto
      this.sendMessage({
        type: 'response',
        text: response,
        timestamp: new Date(),
        emergency: hasEmergency
      });
      
      // Gera √°udio da resposta usando Google Cloud Text-to-Speech
      console.log(`[${this.sessionId}] üîä Gerando √°udio da resposta...`);
      const audioData = await this.synthesizeSpeech(response);
      if (audioData) {
        console.log(`[${this.sessionId}] ‚úÖ √Åudio gerado, enviando para cliente...`);
        this.sendMessage({
          type: 'audio',
          audio: audioData,
          timestamp: new Date()
        });
      } else {
        console.log(`[${this.sessionId}] ‚ùå Falha ao gerar √°udio`);
      }
      
    } catch (error) {
      console.error(`[${this.sessionId}] Erro ao gerar resposta:`, error);
      this.sendMessage({
        type: 'error',
        message: 'Erro ao gerar resposta m√©dica'
      });
    }
  }

  // Extrai sintomas acumulados de toda a conversa
  extractSymptomsFromConversation() {
    const symptoms = [];
    const symptomKeywords = [
      // Portugu√™s
      'febre', 'dor de cabe√ßa', 'cefaleia', 'tosse', 'dor de garganta', 'n√°usea', 'v√¥mito',
      'diarreia', 'tontura', 'fadiga', 'cansa√ßo', 'fraqueza', 'dor no corpo', 'mal estar',
      'congest√£o nasal', 'coriza', 'espirros', 'dor abdominal', 'dor no peito',
      
      // Ingl√™s  
      'fever', 'headache', 'cough', 'sore throat', 'nausea', 'vomiting',
      'diarrhea', 'dizziness', 'fatigue', 'weakness', 'body aches', 'runny nose',
      'sneezing', 'abdominal pain', 'chest pain', 'shortness of breath'
    ];

    // Analisa todas as mensagens do usu√°rio
    this.conversationHistory
      .filter(msg => msg.role === 'user')
      .forEach(msg => {
        const lowerContent = msg.content.toLowerCase();
        
        symptomKeywords.forEach(keyword => {
          if (lowerContent.includes(keyword) && !symptoms.includes(keyword)) {
            symptoms.push(keyword);
          }
        });
      });

    console.log(`[${this.sessionId}] üìã Sintomas extra√≠dos: ${symptoms.join(', ')}`);
    return symptoms;
  }

  // Busca informa√ß√µes no Elasticsearch
  async searchElasticsearch(query) {
    try {
      console.log(`[${this.sessionId}] üì° Consultando Elasticsearch Cloud...`);
      
      const elasticsearchUrl = process.env.ELASTICSEARCH_URL;
      const apiKey = process.env.ELASTICSEARCH_API_KEY;
      const indexName = 'search-medical';
      
      if (!elasticsearchUrl || !apiKey) {
        console.log(`[${this.sessionId}] ‚ö†Ô∏è Elasticsearch n√£o configurado, usando dados mock`);
        return this.getMockDiseaseData(query);
      }
      
      const searchBody = {
        size: 5,
        query: {
          bool: {
            should: [
              // Busca em doen√ßas
              {
                match: {
                  Disease: {
                    query,
                    fuzziness: 'AUTO',
                    boost: 3.0
                  }
                }
              },
              // Busca em sintomas
              ...Array.from({ length: 12 }, (_, i) => ({
                match: {
                  [`Symptom_${i + 1}`]: {
                    query,
                    fuzziness: 'AUTO',
                    boost: 1.0
                  }
                }
              }))
            ],
            minimum_should_match: 1
          }
        }
      };

      const response = await fetch(`${elasticsearchUrl}/${indexName}/_search`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': `ApiKey ${apiKey}`
        },
        body: JSON.stringify(searchBody)
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`[${this.sessionId}] Elasticsearch error ${response.status}:`, errorText);
        throw new Error(`Elasticsearch error: ${response.status}`);
      }

      const data = await response.json();
      const hits = data.hits.hits;

      // Processa resultados
      const diseases = hits.map(hit => {
        const source = hit._source;
        const symptoms = [];
        
        for (let i = 1; i <= 12; i++) {
          const symptom = source[`Symptom_${i}`];
          if (symptom && symptom.trim() !== '') {
            symptoms.push(symptom.trim());
          }
        }
        
        return {
          disease: source.Disease,
          symptoms: symptoms,
          score: hit._score,
          allSymptoms: symptoms.join(', ')
        };
      });

      console.log(`[${this.sessionId}] üìä Elasticsearch retornou ${hits.length} resultados`);
      console.log(`[${this.sessionId}] üîç Processadas ${diseases.length} doen√ßas relacionadas`);
      
      // Log das primeiras doen√ßas encontradas
      diseases.slice(0, 2).forEach((disease, i) => {
        console.log(`[${this.sessionId}]   ${i + 1}. ${disease.disease} (score: ${disease.score.toFixed(2)})`);
        console.log(`[${this.sessionId}]      Sintomas: ${disease.allSymptoms.substring(0, 100)}...`);
      });
      
      return diseases;

    } catch (error) {
      console.error(`[${this.sessionId}] ‚ùå Erro no Elasticsearch:`, error);
      // Fallback com dados mock para desenvolvimento
      return this.getMockDiseaseData(query);
    }
  }

  // Dados mock para desenvolvimento
  getMockDiseaseData(query) {
    const mockData = {
      'febre': [
        {
          disease: 'Gripe',
          symptoms: ['Febre', 'Dor de cabe√ßa', 'Dor no corpo', 'Tosse', 'Congest√£o nasal'],
          score: 0.95,
          allSymptoms: 'Febre, Dor de cabe√ßa, Dor no corpo, Tosse, Congest√£o nasal'
        },
        {
          disease: 'COVID-19',
          symptoms: ['Febre', 'Tosse seca', 'Fadiga', 'Perda de olfato', 'Dor de garganta'],
          score: 0.90,
          allSymptoms: 'Febre, Tosse seca, Fadiga, Perda de olfato, Dor de garganta'
        }
      ],
      'dor de cabe√ßa': [
        {
          disease: 'Enxaqueca',
          symptoms: ['Dor de cabe√ßa puls√°til', 'N√°usea', 'Sensibilidade √† luz', 'V√¥mito'],
          score: 0.92,
          allSymptoms: 'Dor de cabe√ßa puls√°til, N√°usea, Sensibilidade √† luz, V√¥mito'
        }
      ]
    };

    const lowerQuery = query.toLowerCase();
    for (const [key, value] of Object.entries(mockData)) {
      if (lowerQuery.includes(key)) {
        return value;
      }
    }
    
    return [];
  }

  // Analisa se precisa de mais informa√ß√µes para diagn√≥stico
  analyzeIfNeedsMoreInfo(userInput, diseases, accumulatedSymptoms = []) {
    // Se √© uma resposta de confirma√ß√£o e j√° temos sintomas, n√£o busca mais
    const isConfirmation = /^(yes|no|sim|n√£o|yeah|nope|i do|eu tenho|tenho|n√£o tenho)$/i.test(userInput.trim());
    
    if (isConfirmation && accumulatedSymptoms.length > 0) {
      console.log(`[${this.sessionId}] üéØ Resposta de confirma√ß√£o detectada com sintomas: ${accumulatedSymptoms.join(', ')}`);
      return { 
        needs: false, 
        reason: 'confirmation_with_context',
        message: 'Suficientes informa√ß√µes coletadas para diagn√≥stico.' 
      };
    }
    
    if (diseases.length === 0) {
      return { 
        needs: false, 
        reason: 'no_results',
        message: 'N√£o encontrei informa√ß√µes sobre esses sintomas.' 
      };
    }

    // Se h√° muitas doen√ßas poss√≠veis (mais de 3)
    if (diseases.length > 3) {
      return {
        needs: true,
        reason: 'too_many_options',
        diseases: diseases.slice(0, 3),
        message: 'Encontrei v√°rias possibilidades. Preciso de mais detalhes.'
      };
    }

    // Se √© a primeira pergunta e muito vaga
    if (this.conversationHistory.length <= 2 && this.isVagueSymptom(userInput)) {
      return {
        needs: true,
        reason: 'vague_symptoms',
        diseases: diseases,
        message: 'Preciso de mais informa√ß√µes sobre seus sintomas.'
      };
    }

    // Se os sintomas das doen√ßas encontradas s√£o muito diferentes
    if (this.hasDiverseSymptoms(diseases)) {
      return {
        needs: true,
        reason: 'diverse_symptoms',
        diseases: diseases,
        message: 'Os sintomas podem indicar condi√ß√µes diferentes.'
      };
    }

    return { needs: false, diseases: diseases };
  }

  // Verifica se o sintoma √© muito vago
  isVagueSymptom(input) {
    const vagueSymptoms = [
      'dor', 'mal estar', 'n√£o me sinto bem', 'estou ruim', 
      'febre', 'cansa√ßo', 'fraqueza'
    ];
    
    const lowerInput = input.toLowerCase();
    return vagueSymptoms.some(symptom => 
      lowerInput.includes(symptom) && lowerInput.split(' ').length < 4
    );
  }

  // Verifica se as doen√ßas t√™m sintomas muito diversos
  hasDiverseSymptoms(diseases) {
    if (diseases.length < 2) return false;
    
    // Conta sintomas √∫nicos vs comuns
    const allSymptoms = diseases.flatMap(d => d.symptoms);
    const uniqueSymptoms = [...new Set(allSymptoms)];
    const commonSymptoms = uniqueSymptoms.filter(symptom =>
      diseases.filter(d => d.symptoms.includes(symptom)).length > 1
    );
    
    // Se menos de 30% dos sintomas s√£o comuns, √© diverso
    return (commonSymptoms.length / uniqueSymptoms.length) < 0.3;
  }

  // Gera pergunta de follow-up
  async generateFollowUpQuestion(userInput, diseases, needsMoreInfo) {
    const diseaseContext = diseases.slice(0, 3).map(d => 
      `${d.disease}: ${d.allSymptoms}`
    ).join('\n');

    const prompt = `
Voc√™ √© um m√©dico fazendo uma consulta. O paciente relatou: "${userInput}"

POSS√çVEIS CONDI√á√ïES ENCONTRADAS:
${diseaseContext}

SITUA√á√ÉO: ${needsMoreInfo.reason}
- too_many_options: Muitas possibilidades
- vague_symptoms: Sintomas muito vagos
- diverse_symptoms: Sintomas indicam condi√ß√µes diferentes

INSTRU√á√ïES:
1. Fa√ßa UMA pergunta espec√≠fica e clara
2. Foque no sintoma mais importante para diferenciar as condi√ß√µes
3. Use linguagem simples e emp√°tica
4. Pergunte sobre dura√ß√£o, intensidade, ou sintomas relacionados
5. Seja conciso (m√°ximo 2 frases)

EXEMPLOS DE BOAS PERGUNTAS:
- "H√° quantos dias voc√™ est√° com febre?"
- "A dor de cabe√ßa √© puls√°til ou constante?"
- "Voc√™ tem outros sintomas como n√°usea ou v√¥mito?"

PERGUNTA DE FOLLOW-UP:`;

    try {
      const result = await this.geminiModel.generateContent(prompt);
      return result.response.text().trim();
    } catch (error) {
      console.error(`[${this.sessionId}] Erro ao gerar follow-up:`, error);
      return "Pode me contar mais detalhes sobre seus sintomas? H√° quanto tempo come√ßaram?";
    }
  }

  // Gera resposta m√©dica final
  async generateFinalMedicalResponse(userInput, diseases) {
    if (diseases.length === 0) {
      return "N√£o encontrei informa√ß√µes espec√≠ficas sobre os sintomas que voc√™ mencionou. Recomendo consultar um m√©dico para uma avalia√ß√£o adequada.";
    }

    const conversationContext = this.conversationHistory
      .slice(-4) // √öltimas 4 mensagens para n√£o sobrecarregar
      .map(h => `${h.role}: ${h.content}`)
      .join('\n');

    const diseaseContext = diseases.slice(0, 3).map((d, i) => 
      `CONDI√á√ÉO ${i + 1}: ${d.disease}
Sintomas t√≠picos: ${d.allSymptoms}
Relev√¢ncia: ${(d.score * 100).toFixed(1)}%`
    ).join('\n\n');

    const prompt = `
Voc√™ √© um assistente m√©dico virtual. Com base na conversa e nas informa√ß√µes encontradas, forne√ßa uma resposta educacional.

HIST√ìRICO DA CONVERSA:
${conversationContext}

INFORMA√á√ïES M√âDICAS ENCONTRADAS:
${diseaseContext}

INSTRU√á√ïES:
1. Use APENAS as informa√ß√µes fornecidas
2. Explique as poss√≠veis condi√ß√µes de forma clara
3. Mencione quando procurar atendimento m√©dico
4. Use linguagem acess√≠vel
5. Inclua disclaimer m√©dico
6. Seja conciso mas informativo
7. Se detectar urg√™ncia, alerte imediatamente

RESPOSTA M√âDICA:`;

    try {
      const result = await this.geminiModel.generateContent(prompt);
      let response = result.response.text().trim();
      
      // Adiciona disclaimer se n√£o tiver
      if (!response.toLowerCase().includes('m√©dico') && !response.toLowerCase().includes('profissional')) {
        response += '\n\nLembre-se: Esta √© apenas uma orienta√ß√£o educacional. Sempre consulte um profissional de sa√∫de para diagn√≥stico e tratamento adequados.';
      }
      
      return response;
    } catch (error) {
      console.error(`[${this.sessionId}] Erro ao gerar resposta final:`, error);
      return "Encontrei informa√ß√µes sobre suas condi√ß√µes, mas recomendo consultar um m√©dico para uma avalia√ß√£o completa e tratamento adequado.";
    }
  }

  // Sintetiza fala usando Google Cloud Text-to-Speech
  async synthesizeSpeech(text) {
    try {
      console.log(`[${this.sessionId}] Sintetizando fala: ${text.substring(0, 50)}...`);
      
      const request = {
        input: { text: text },
        voice: {
          languageCode: 'pt-BR',
          name: 'pt-BR-Wavenet-A', // Voz feminina natural
          ssmlGender: 'FEMALE',
        },
        audioConfig: {
          audioEncoding: 'MP3',
          speakingRate: 0.9, // Ligeiramente mais devagar para clareza
          pitch: 0.0,
          volumeGainDb: 0.0,
        },
      };
      
      const [response] = await ttsClient.synthesizeSpeech(request);
      
      // Converte para base64
      const audioBase64 = response.audioContent.toString('base64');
      console.log(`[${this.sessionId}] √Åudio sintetizado com sucesso`);
      
      return audioBase64;
      
    } catch (error) {
      console.error(`[${this.sessionId}] Erro na s√≠ntese:`, error);
      return null;
    }
  }

  // Detecta emerg√™ncias m√©dicas
  detectEmergency(text) {
    const emergencyKeywords = [
      'dor no peito', 'falta de ar', 'desmaio', 'convuls√£o',
      'sangramento intenso', 'perda de consci√™ncia', 'derrame',
      'infarto', 'avc', 'overdose', 'suic√≠dio', 'envenenamento',
      'chest pain', 'difficulty breathing', 'stroke', 'heart attack'
    ];
    
    const lowerText = text.toLowerCase();
    return emergencyKeywords.some(keyword => lowerText.includes(keyword));
  }

  // Envia mensagem para o cliente
  sendMessage(data) {
    if (this.ws.readyState === this.ws.OPEN) {
      this.ws.send(JSON.stringify(data));
    }
  }

  // Fecha a sess√£o
  close() {
    this.isConnected = false;
    this.audioBuffer = [];
    this.conversationHistory = [];
    console.log(`[${this.sessionId}] Sess√£o Google Cloud encerrada`);
  }
}

// Gerencia conex√µes WebSocket
wss.on('connection', (ws) => {
  const sessionId = `session-${Date.now()}`;
  console.log(`Nova conex√£o Google Cloud: ${sessionId}`);
  
  let session = null;
  
  ws.on('message', async (message) => {
    try {
      const data = JSON.parse(message);
      
      switch (data.type) {
        case 'init':
          session = new GeminiLiveGoogleCloudSession(ws, sessionId);
          activeSessions.set(sessionId, session);
          await session.initialize(data.config || {});
          break;
          
        case 'audio':
          if (session && data.audio) {
            await session.processAudio(data.audio);
          }
          break;
          
        case 'text':
          if (session && data.text) {
            await session.processText(data.text);
          }
          break;
          
        case 'close':
          if (session) {
            session.close();
            activeSessions.delete(sessionId);
          }
          break;
          
        default:
          console.log(`[${sessionId}] Tipo de mensagem desconhecido:`, data.type);
      }
      
    } catch (error) {
      console.error(`[${sessionId}] Erro ao processar mensagem:`, error);
      ws.send(JSON.stringify({
        type: 'error',
        message: 'Erro ao processar mensagem'
      }));
    }
  });
  
  ws.on('close', () => {
    if (session) {
      session.close();
      activeSessions.delete(sessionId);
    }
    console.log(`Conex√£o fechada: ${sessionId}`);
  });
  
  ws.on('error', (error) => {
    console.error(`Erro WebSocket ${sessionId}:`, error);
  });
});

// Rota de sa√∫de
app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    service: 'Gemini Live Google Cloud Server',
    activeSessions: activeSessions.size,
    timestamp: new Date()
  });
});

// Porta do servidor
const PORT = process.env.GEMINI_LIVE_PORT || 8080;

server.listen(PORT, () => {
  console.log(`üöÄ Servidor Gemini Live Google Cloud rodando na porta ${PORT}`);
  console.log(`üì° WebSocket dispon√≠vel em ws://localhost:${PORT}`);
  console.log(`üè• Modo m√©dico ativado com Google Cloud Speech APIs`);
  console.log(`üé§ Speech-to-Text: Ativado`);
  console.log(`üîä Text-to-Speech: Ativado`);
  console.log(`‚úÖ API Key configurada: ${apiKey ? 'Sim' : 'N√£o'}`);
});

// Trata sinais de t√©rmino
process.on('SIGTERM', () => {
  console.log('SIGTERM recebido, fechando servidor...');
  server.close(() => {
    console.log('Servidor fechado');
  });
});