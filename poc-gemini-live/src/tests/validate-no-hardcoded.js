/**
 * Validation script to check if hardcoded patterns were removed
 */

import fs from 'fs';

const filesToCheck = [
    'semantic-medical-extractor.ts',
    'medical-analyzer.ts',
    'physician-medical-analyzer.ts'
];

console.log('üîç === VALIDA√á√ÉO: REMO√á√ÉO DE PADR√ïES HARDCODED ===\n');

let totalHardcodedFound = 0;

for (const file of filesToCheck) {
    console.log(`üìÑ Verificando: ${file}`);
    
    try {
        const content = fs.readFileSync(file, 'utf8');
        
        // Padr√µes que indicam hardcoded
        const hardcodedPatterns = [
            /symptomKeywords.*=/,
            /medicalPatterns.*=/,
            /pattern:\s*\/.*\/g/,
            /private readonly.*Keywords.*=/,
            /initializeMedicalPatterns/,
            /extractUsingPatternFallback/,
            /\['febre', 'dor'/,
            /regex.*medical/i
        ];
        
        let fileHardcodedCount = 0;
        
        for (const pattern of hardcodedPatterns) {
            const matches = content.match(new RegExp(pattern.source, 'g'));
            if (matches) {
                fileHardcodedCount += matches.length;
                console.log(`  ‚ö†Ô∏è  Encontrado padr√£o hardcoded: ${pattern.source} (${matches.length}x)`);
            }
        }
        
        if (fileHardcodedCount === 0) {
            console.log(`  ‚úÖ Nenhum padr√£o hardcoded encontrado`);
        } else {
            console.log(`  ‚ùå Total de padr√µes hardcoded: ${fileHardcodedCount}`);
        }
        
        totalHardcodedFound += fileHardcodedCount;
        
    } catch (error) {
        console.log(`  üí• Erro ao ler arquivo: ${error.message}`);
    }
    
    console.log('');
}

console.log('üìä === RESULTADO FINAL ===');
if (totalHardcodedFound === 0) {
    console.log('üéâ SUCESSO: Nenhum padr√£o hardcoded encontrado!');
    console.log('‚úÖ Sistema agora usa extra√ß√£o puramente sem√¢ntica');
} else {
    console.log(`‚ùå ATEN√á√ÉO: ${totalHardcodedFound} padr√µes hardcoded ainda encontrados`);
    console.log('üîß Necess√°rio continuar a remo√ß√£o');
}

// Verificar se m√©todos sem√¢nticos est√£o presentes
console.log('\nüß† === VERIFICA√á√ÉO DE M√âTODOS SEM√ÇNTICOS ===');

for (const file of filesToCheck) {
    try {
        const content = fs.readFileSync(file, 'utf8');
        
        const semanticIndicators = [
            /semanticMedicalExtractor/,
            /billingualElasticsearchRAG/,
            /extractMedicalEntities/,
            /semantic.*search/i,
            /embedding/i
        ];
        
        let semanticMethodsFound = 0;
        
        for (const indicator of semanticIndicators) {
            if (indicator.test(content)) {
                semanticMethodsFound++;
            }
        }
        
        console.log(`üìÑ ${file}: ${semanticMethodsFound} m√©todos sem√¢nticos encontrados`);
        
    } catch (error) {
        console.log(`üí• Erro: ${error.message}`);
    }
}

console.log('\n‚úÖ Valida√ß√£o conclu√≠da!');